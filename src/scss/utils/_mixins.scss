/// Mixin to size elements.
/// @param {Number} $width           - Width
/// @param {Number} $height [$width] - Height
@mixin size($width, $height: $width) {
  width: $width;
  height: $height;
}


/// Responsive manager.
/// @requires {variable} breakpoints
/// @param {String} $breakpoint - Breakpoint
/// @throws No value found for `$breakpoint`. Please make sure it is defined in `$breakpoints` map.
@mixin respond-to($breakpoint) {
  // If the key exists in the map
  @if map-has-key($breakpoints, $breakpoint) {
    // Prints a media query based on the value
    @media #{inspect(map-get($breakpoints, $breakpoint))} {
      @content;
    }
  }

  // If the key doesn't exist in the map
  @else {
    @warn "No value found for `#{$breakpoint}`. "
        + "Please make sure it is defined in `$breakpoints` map.";
  }
}


/// Webfonts manager.
/// @requires {variable} webfonts
/// @param {String} $style - Font style
/// @param {String} $weight ['Regular'] - Font weight
/// @throws Could not find any matching font for `$style` `$weight`
@mixin webfont($style, $weight: 'Regular') {
  $font: map-get(map-get($webfonts, $style), $weight);

  @if not $font {
    @error 'No matching font for `#{$style}` `#{$weight}`';
  }

  @each $prop, $val in $font {
    #{$prop}: $val;
  }
}
